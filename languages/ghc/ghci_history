main 
:r
main 
:r
main 
main
3 - 9
import CodeWorld
map (\(ls, y) -> map (\(c, x) -> (c, (x, y))) (enum ls)) (enum pic)
:t (\x y -> x + y)
b = True
x = 1
:t sub
sub x y = x - y
:t 1
1
x = 1
:t add
add x y = x + y
:t \(c, x) -> (c, (x, y))
y = 3
:t \(c, x) -> (c, (x, y))
enum pic
concat $ map (\(ls, y) -> map (\(c, x) -> (c, (x, y))) (enum ls)) (enum pic)
:t (++)
:t concat
map (\(ls, y) -> map (\(c, x) -> (c, (x, y))) (enum ls)) (enum pic)
map (\(ls, y) -> map (\(c, x) -> (c, (x, y))) (enum ls)) (enum pic)
pic = [" # ", "# #"]
enum xs = zip xs [0..]
map (\(ls, y) -> map (\(c, x) -> (c, (x, y))) (enum ls)) (enum pic)
map (\(ls, y) -> map (\(c, x) -> (c, (x, y))) (enum ls)) (enum pic)
f 8 9
f = (\x y -> x + y)
f 8 7
f x y = (\x y -> x + y)
enum pic
enum $ head pic
enum pic
map (\(ls, y) -> map (\(c, x) -> (c, (x, y))) (enum ls)) (enum pic)
enum pic
enum xs = zip xs [0..]
map (\(linha, indice) -> enum linha) $ enum pic
enum pic
(\(x, y) -> x + y) (3, 5)
(\(x, y) -> x + y) 3 5
(\x y -> x + y) 3 5
enum pic
enum xs = zip xs [0..]
pic = [" # ", "# #"]
echo foldr{1,2}
:t scanl1
:t scanll
:t scanl
partition isDigit "12abc34"
import Data.List
import Data.Char 
isNegativeZero (-0)
isNegativeZero (+0)
isNegativeZero +0
isNegativeZero 0
isNegativeZero 9
isNegativeZero (-0)
isNegativeZero (-100)
isNegativeZero -100
isNegativeZero 100
:t isNegativeZero 
:t scanl
:info Functor 
:info Semigroup 
:info Semigroup 
:info Either 
:t (<*>)
:t (id <*> id)
square = (*) <$> id <*> id
functions <*> nums 
nums = [1, 2, 3]
functions = [(*2), (+3), (^2)]
:info Applicative 
:t Applicative 
:t id
:t (<*>)
(id <*> id) 3
square 3
square = (*) <$> id <*> id
f [3]
f 
f [abs]
:t f
f = sum <*> length 
f = (\sum count -> sum / count) <$> sum <*> length 
f - (\sum count -> sum / count) <$> sum <*> length 
(\sum count -> sum / count) <$> sum <*> length 
:t (sqrt . sum . fst)
:t (sum . fst)
:t sum
:t fst
f ([9..100], -1)
:t f
f = sqrt . sum . fst
